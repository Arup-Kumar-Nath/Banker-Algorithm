#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

//global variables delaration;
#define M 3 //no of resources
#define N 5 //no of processes
 int i = 0;
 
 pthread_mutex_t mutex; 
 int init[M];
 int avail [M];
 int allocmatrix [N][M]; 
 int MaxMatrix [N][M];
 int NeedMatrix [N][M];

	void *procs(void* procsID)
	{     
	            int pID = *(int*)procsID;
                    int c=0;
        	    while(c<3)
            		{
                        	//generate random requests
                        	sleep(1);
                        	int request[M];
				pthread_mutex_lock(&mutex);

                        	//NeedMatrix vector ko initialize karna
                        	for(i = 0; i < M; i++)
                        		{
                        	            if(NeedMatrix[pID][i] != 0)
                                    		{
                                    		 request[i] = rand() % NeedMatrix[pID][i];
                                    	        }
                                    	  else
                                                {
                                                request[i] = 0;
                                                }
                      		       }

                        printReqOrRelVector(request);

                        getRes(pID,request);

  			pthread_mutex_unlock(&mutex);
           
//random release vector gernerate karne ke liye            
			sleep(1);
			int releaseVector[M];
			pthread_mutex_lock(&mutex);

//release vector ko initialize karna
			for(i = 0; i < M; i++)
			{
				if(allocmatrix[pID][i] != 0)
           				 {
           			             releaseVector[i] = rand() % allocmatrix[pID][i];
           				 }
           		      else
           				 {
            			             releaseVector[i] = 0;
            				 }
			}


				
       	                        printReqOrRelVector(releaseVector);
				relRes(pID,releaseVector);
				pthread_mutex_unlock(&mutex);

				c++;
            	   }
}
